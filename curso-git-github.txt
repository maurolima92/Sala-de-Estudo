#Curso git para Iniciante
Udemy

Principais comandos do git:
    * git init : iniciar serviço do git na pasta
    * git log : mostra todo commit realizado
    * git diff: mostra toda modificação que foi realiza no projeto e certificar que está tudo ok
    * git log --graph : mostra historio de cada commit e como foi dividido pelos branches

    * git status: verifica os status dos artigos;
    * git add "nome do arquivo": adiciona os arquivos para ser adicionado
    * git commit -am "mensagem": "-a" para mandar direto e "m" para deixar uma mensgem;
    * git remote add origin https://github.com/maurolima92/Sala-de-Estudo.git 
    * git branch -M main (apenas a primeira vez)
    * git push -u origin "main/master" (utilizar apena um dentro das aspas, precisa verifica qual branch seu bash está utilizando)

Fez cagada manito? Cuidadooooo com Reset
    * git checkout "nome do arquivo" : vai retornar o arquivo para antes da alteração e antes do git add "nome do arquivo"
    * git reset HEAD "nome do arquivo" : remover da fila do stage feito pelo git add "nome do arquivo"

    Git reset:
        * --soft : matar o commit e retomar para o stage prontinho para commitar novamente
        * --mixed : matar o commit e retomar para o stage modified
        * --hard : matar todos os commits já feito e retomar o arquivo antes do primeiro commit

Clonando pasta de repositorios
    * git clone git@github.com:maurolima92/Sala-de-Estudo.git "nome da pasta"

Criando chave SSH - Git e Github para Iniciantes
    Url de apoio: https://hcode.com.br/blog/adicionando-uma-chave-ssh-ao-github

    * Abrir bash comand
    * ssh-keygen -t rsa -b 4096 -C "Email da conta do github"
    * Apertar tecla enter para confirmar as etapas
    * No password ou passphrase aperar enter novamente para não colocar senha

    Para vincular a chave ssh ao git hub:
    * cd ~/.ssh : ir para raiz do diretorio
    * Precisamos colcoar no github o id_rsa.pub para isso digitar:
        * cat id_rsa.pub
    * Copiar a chave todo código "id_rsa.pub" e abrir o navegado o github

    Vinculando a chave ssh no Github:
    * Clicar na foto de perfil e ir em settings
    * Clicar no menu lateral SSH and GPS Keys
    * Clicar no botão New SSH Keys
    * Cola o código que copiamos do arquivo id_rsa.pub e nomeamos o Title para referenciar
    o pc que está sendo configurado

Fork
    Objetivo é criar uma cópia do outro projeto para trabalhar simutaneamente e depois mandar
    as motificações para o usuário titular do projeto ou da organizaçaõ.

Ramificação, Merges e Rebases (branch)
    Principais comando dos branch
        * git checkout -b "nome do branch" : para criar um novo branch
        * git branch : mostra todos os branch e destaca o branch que você está neste momento
        * git checkout "nome do branch" : para mudar de branch
        * git branch -D "nome do branch" : para excluir um branch

    Fazendo Merge e Rebase (Unir Branches)

    Diferença é que o merge cria um commit para unir os branchs e o rebase uni os branch sem criar um novo commit,
    porém o rebase perde a ordem cronologica das ações, mas ganha um hitórico linear.

    Exemplo merge
        * Criar um arquivo no branch main e fazer um git commit
        * Criar um "novo branch" e criar um outro arquivo e fazer um git commit
        * Voltar ao branch main e criar um novo arquivo e fazer um git commit
        * No branch main fazer um git log para acompanhar a ordem (apenas 2 arquivos, pq o outro está em outro branch)
        * Fazer um git MERGE nome do "novo branch" criado
        * Fazer um git log para acompanhar todos os commits mesclados com historio linear
        * Fazer um git log --graph

    MERGE - No branch main:
        * git merge "nome do branch"
        * Vais ser criado um novo commit para adicionar o o branch do merge acima
        git log --graph

    Exemplo Rebase
        * Criar um arquivo no branch main e fazer um git commit
        * Criar um "novo branch" e criar um outro arquivo e fazer um git commit
        * Voltar ao branch main e criar um novo arquivo e fazer um git commit
        * No branch main fazer um git log para acompanhar a ordem (apenas 2 arquivos, pq o outro está em outro branch)
        * Fazer um git REBASE nome do "novo branch" criado
        * Fazer um git log para acompanhar todos os commits mesclados com historio linear
        * Fazer um git log --graph
    
    REBASE - No branch main
        * gir rebase "nome do branch"
        * Os branches vão ser alocados junto ao main de forma sequencial ao invés de mostrar as ramificações
        criadas, perdendo o historio linear do que foi feito.
        * git log --graph

Extras: Git Ignore, Git Stash, Alias, Versionamento de tags e Git Revert

    Git Ignore: 
        gitignore é um arquivo que criamos na raiz do nosso projeto para poder ignorar arquivos e pastas do
        versionamento. Dentro do ".gitignore" colocamos todos os arquivos e pastas para serem ignorados pelo git.

        * crair um arquivo ".gitignore" para listar os arquivos que irão ser ignorados
        * Se usar o "*.extensão do arquivo" o git vai ignorar todos os arquivo daquela extensão, ex: "*.json"
        * Para ignorar um arquivo especifico basta colocar o nome completo do arquivo, ex: "template.css"

        #Ajuda - Repositorios de varias aplicações mostrando quais arquivos precisam ser ignorados em cada uma
        https://github.com/github/gitignore

    Git Stash
        git stash arquiva (ou faz o stash) de alterações que você fez na cópia de trabalho durante um
        determinado período, para que você possa trabalhar em outra coisa, depois voltar e fazer a reaplicação 
        mais tarde.

        * git stash
        * git stash applay
        * git stash list
        * git stash clear

    Alias
        Feito para encurtar comando, você configura um alias e utiliza quando precisar

        * git config --global alias.s status : quando digitar "git s" o git vai reconhecer meu alias e 
        executará o comando git status 

    Versionamento com tags
        git tag é em geral usado para capturar um ponto no histórico que é usado para uma versão marcada 
        (por exemplo, v1. 0.1). Um marcador é como uma ramificação que não muda. Diferente das ramificações, 
        os marcadores depois de criados não têm mais histórico de commits. 

        * git tag -a 1.0.0 -m "Mensagem que desejar"
        * git push oringin main --tags 